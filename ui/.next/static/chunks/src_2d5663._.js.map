{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://F%3A/Workspace%206/Go/hail/ui/src/components/ui/animated-grid-pattern.tsx"],"sourcesContent":["\"use client\";\n\nimport { motion } from \"motion/react\";\nimport {\n  ComponentPropsWithoutRef,\n  useEffect,\n  useId,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nexport interface AnimatedGridPatternProps\n  extends ComponentPropsWithoutRef<\"svg\"> {\n  width?: number;\n  height?: number;\n  x?: number;\n  y?: number;\n  strokeDasharray?: any;\n  numSquares?: number;\n  maxOpacity?: number;\n  duration?: number;\n  repeatDelay?: number;\n}\n\nexport function AnimatedGridPattern({\n  width = 40,\n  height = 40,\n  x = -1,\n  y = -1,\n  strokeDasharray = 0,\n  numSquares = 50,\n  className,\n  maxOpacity = 0.5,\n  duration = 4,\n  repeatDelay = 0.5,\n  ...props\n}: AnimatedGridPatternProps) {\n  const id = useId();\n  const containerRef = useRef(null);\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\n  const [squares, setSquares] = useState(() => generateSquares(numSquares));\n\n  function getPos() {\n    return [\n      Math.floor((Math.random() * dimensions.width) / width),\n      Math.floor((Math.random() * dimensions.height) / height),\n    ];\n  }\n\n  function generateSquares(count: number) {\n    return Array.from({ length: count }, (_, i) => ({\n      id: i,\n      pos: getPos(),\n    }));\n  }\n\n  const updateSquarePosition = (id: number) => {\n    setSquares((currentSquares) =>\n      currentSquares.map((sq) =>\n        sq.id === id\n          ? {\n              ...sq,\n              pos: getPos(),\n            }\n          : sq\n      )\n    );\n  };\n\n  useEffect(() => {\n    if (dimensions.width && dimensions.height) {\n      setSquares(generateSquares(numSquares));\n    }\n  }, [dimensions, numSquares]);\n\n  useEffect(() => {\n    const resizeObserver = new ResizeObserver((entries) => {\n      for (let entry of entries) {\n        setDimensions({\n          width: entry.contentRect.width,\n          height: entry.contentRect.height,\n        });\n      }\n    });\n\n    if (containerRef.current) {\n      resizeObserver.observe(containerRef.current);\n    }\n\n    return () => {\n      if (containerRef.current) {\n        resizeObserver.unobserve(containerRef.current);\n      }\n    };\n  }, [containerRef]);\n\n  return (\n    <svg\n      ref={containerRef}\n      aria-hidden=\"true\"\n      className={cn(\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\n        className\n      )}\n      {...props}\n    >\n      <defs>\n        <pattern\n          id={id}\n          width={width}\n          height={height}\n          patternUnits=\"userSpaceOnUse\"\n          x={x}\n          y={y}\n        >\n          <path\n            d={`M.5 ${height}V.5H${width}`}\n            fill=\"none\"\n            strokeDasharray={strokeDasharray}\n          />\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${id})`} />\n      <svg x={x} y={y} className=\"overflow-visible\">\n        {squares.map(({ pos: [x, y], id }, index) => (\n          <motion.rect\n            initial={{ opacity: 0 }}\n            animate={{ opacity: maxOpacity }}\n            transition={{\n              duration,\n              repeat: 1,\n              delay: index * 0.1,\n              repeatType: \"reverse\",\n            }}\n            onAnimationComplete={() => updateSquarePosition(id)}\n            key={`${x}-${y}-${index}`}\n            width={width - 1}\n            height={height - 1}\n            x={x * width + 1}\n            y={y * height + 1}\n            fill=\"currentColor\"\n            strokeWidth=\"0\"\n          />\n        ))}\n      </svg>\n    </svg>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 181, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}